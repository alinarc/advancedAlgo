Alina Rossi-Conaway & Alexander Duffy
Prof. Waleed Meleis
EECE4542
8 June 2018

For this assignment, we used AMPL to formulate the knapsack and graph coloring probelms as linear programming 
problems to be solved by CPLEX.

Project 3a
----------
Solving the knapsack problem using AMPL proved fairly straightforward. We simply had to declare a vector of 
binary variables of the size of the knapsack instance, specify the objective to maximize (the sum of the 
values of the selected items) and the relevant constraint (that the sum of the costs of the selected items
be less than than the cost restriction. We found that AMPL/CPLEX found universally optimal solutions for
the knapsack instances, as in many cases the total cost of the knapsack exactly equalled the cost limit, and 
the total value of the knapsack was higher than in the solutions found using the greedy algorithm (which in 
turn provided better solutions than the exhaustive algorithm). This is due to the fact that the greedy 
algorithm will not always arrive at an optimal solution for knapsack, but the CPLEX solver will. All of the
instances were solved nearly instantaneously by the solver.

Project 3b
---------
Solving the graph coloring problem proved to be a little more subtle. The only constraint that was immediately
obvious to us was the constraint that required each node have only one color (sum {c in 0..numColors-1} color[i,c] = 1; in AMPL).
We were much less sure about how to specify the requirements for the conflict variable. After messing around 
with AMPL syntax (using if-then-else statements, using the implies operator (==>), etc.), and with some guidance
from Professor Meleis, we realized we were going about it wrong. We learned that we only needed to specify the 
condition that would make a conflict, and make that condition imply the conflict value. Because we specified 
in the objective function that we wanted to minimize the total number of conflicts, we did not need to separately
specify the conditions that would result in no conflicts. Thus, we only needed one simple constraint in our model 
file: edge[i,j] * (color[i,c] + color[j,c] - 1) - conflict[i,j] <= 0;. This constraint required that if the RHS 
expression were true (1), so too would be the conflict value for this pair of nodes and specific color. In
other words: if, for any color c, there was an edge between two nodes i and j both colored with c, conflict[i,j]=1.
We found that AMPL/CPLEX largely arrived at the same solutions as did the greedy algorithm, although for several
instances it arrived at solutions with fewer conflicts. This suggests that, as with knapsack, the greedy
algorithm will not always arrive at an optimal solution for this kind of graph coloring, but the CPLEX solver will.
The tradeoff here was time: while the greedy algorithm solved all of the instances nearly instantaneously, the CPLEX
solver had to be limited to 10 minutes for the larger instances.
