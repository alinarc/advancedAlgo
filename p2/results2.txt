Alexander Duffy, Alina Rossi-Conaway
Prof. Waleed Maleis
EECE4542
24 May 2017

For this assignment, we wrote greedy algorithms to arrive at solutions for the knapsack problem and graph coloring. The algorithms first sorted the nodes or items according to some relevant parameter, then proceeded to apply them with a label if the label did not create any conflicts—until a conflict was unavoidable. We were pleasantly surprised when all of our instances arrived at reasonable solutions in a fraction of the time required for the exhaustive algorithms of last week's project, which demonstrated the power of using a 'smarter' algorithm.

Project 2a
----------
We sorted the items by their cost to weight ratio, thus providing a ranking of sorts for each item. To do so, we modified the d_matrix header file to include a function that would support initializing a matrix with two vectors and sorting the matrix according to the values in one column.

After they had been sorted, it was trivial to move through the sorted list adding any item that would fit under the cost limit and skipping those that would not.

This greedy algorithm arrived at solutions with higher totalCost and totalValue than did the exhaustive algorithm—especially for larger instances—thus producing more optimal solutions in less time.

Project 2b
----------
The colored graph problem proved to be harder to wrap our heads around.

Initially we thought about ways to improve the accuracy ranged from simple (sorting by degree) to complex (sorting by degree and using second degree as a tie-breaker).

Eventually we settled on sorting the nodes in decreasing order of degree. This approach, we learned, is called the Welsh-Powell algorithm. It is not guaranteed to provide the optimal solution every time, but it tends to perform well and runs in polynomial time.

At each iteration of the algorithm, we incremented the color value and considered the uncolored nodes, coloring them with the current color if they were not adjacent to a node with that color. In the final pass-through (with color=numColors-1), we colored all uncolored nodes with the last color.

This greedy algorithm arrived at solutions with many fewer conflicts than did the exhaustive algorithm, especially for larger instances.