For this first project the algorithm we implemented as the exhaustive algorithm. While simple on the surface, "execute every
possible option," there were many hurdles the team ran into in the execution. One roadblock was at first the group attempted
to write each possible combination into a vector, this proved to be extremely resource intensive an infeasible. The decision
was made instead to just hold the best combination at the time as a vector. Another problem arose when the larger sized 
variations were not yielding any results if cut off by the 600 second time limit. The source of this problem was tracked to
the point where the team had initially checked the combinations of maximum size and worked our way down. It was discovered 
that with the larger sized variations, no combination was discovered in time that satisfied the cost requirement, returning
an empty vector; this was solved by reversing the order and beginning with combinations of size 1 and working our way up.
Additionally while working with graph coloring another issue of a variable of immense size arose when trying to increment through
every variation of colorings. Instead of going through a massive forloop we ended up creating a method that incremented 
in base K through all options adding one to the first bit every time and then seperately checking to see if any bit (starting
at the first) was equal to the base number and if so setting it to 0 and adding one to the bit next to it. 
